######################################
# NV-PAIRS SEARCH
# (c)2022 Michaud Yannick & ksynet.fr
######################################
(defun nvSearch (keys_s?"" nvpairs?nil)
  (let keys (split keys_s ":"))
  (let keyOne (car keys))
  (cond ((keyOne.isNumber)
          (cond ((and (>= keyOne 0) (< keyOne (length nvpairs)))
                  (let value (nth (+ keyOne 1) nvpairs))
                  (cond (((cdr keys).isEmpty) value)
                        (t (nvSearch (join (cdr keys) ':) value))
                  )
                )
                (t nil)
          )
        )
        (t
          (let l (length nvpairs))
          (if (odd l) (return nil))
          (let i 1)
          (while (and (<= i l) (!= (nth i nvpairs) keyOne)) (let i (+ i 2)))
          (cond ((< i l) 
                  (let value (nth (+ i 1) nvpairs))
                  (cond (((cdr keys).isEmpty) value)
                        (t (nvSearch (join (cdr keys) ':) value))
                  )
                )
                (t nil)
          )
        )
  )
)
(setUserHelp 'nvSearch (+s "Usage: (nvSearch KEYS NV_PAIRS)" crlf tab "KEYS is a string like \'key1:key2:...\' where key{n} is either a litteral or an index" crlf tab "NV_PAIRS is a list like the one returned by (Json.getJsonNVPairs JsonReader)"))
