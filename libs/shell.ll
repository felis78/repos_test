(undef shell)
(defun shell ()
   (setq currentdir (environment 'user.dir))
   (setq fs (environment 'file.separator))
  (let oldprompt prompt)
  (prompt (+ currentdir ">"))
  (let cmd "")
  (while (<> cmd 'exit)
    (read 'cmd prompt)
    (let cmdlist (makelist (+ "(" cmd ")")))
    (let arg "")
    (if (> (length cmdlist) 1) (let arg (cadr cmdlist)))
    (if (== (first arg) '\") (let arg (eval arg)))
    (if (<> (trim cmd) "")
       (cond   ((== (car cmdlist) 'restart)
                     (shell)
                     (let cmd 'exit)
                  )
                  ((== (car cmdlist) 'reload)
                     (load 'libs/shell)
                     (shell)
                     (let cmd 'exit)
                  )
               ((== (car cmdlist) 'cd)
                 (cd arg)
               )
               ((== (car cmdlist) 'ls)
                 (ls)
               )
               ((== (car cmdlist) 'dir)
                 (ls)
               )
                  ((== (car cmdlist) 'help)
                     (print "Available commands are cd, ls (dir), restart, reload and help.")
                     (print "To launch a programm, just type its name...")
                  )
               ((<> (car cmdlist) 'exit)
                 (execute cmdlist)
               )
               (t
                 (let cmd 'exit)
               )
       )
    )
  )
   (unset fs)
   (unset currentdir)
   (prompt oldprompt)
   "bye"
)
(undef cd)
(defun cd (d)
   (let ld (split d fs))
   (mapcar 'mcd ld)
  (prompt (+ currentdir ">"))
)
(undef mcd)
(defun mcd (d)
  (let lcd (split currentdir fs))
  (let dd "/")
  (cond ((== d '..)
            (lcd.resetToFirst)
          (while (lcd.hasMoreElements)
            (let dd (+ dd (lcd.nextElement) fs))
          )
          (setq currentdir dd)
         )
         ((== d '.)
          (let d "")
         )
         (t
            (lcd.resetToFirst)
          (while (lcd.hasMoreElements)
            (let dd (+ dd (lcd.nextElement) fs))
          )
          (if (<> d "")
            (let dd (+ dd d))
          )
          (if (isDirectory dd)
            (setq currentdir (+ dd fs))
          )
         )
   )
)
(undef ls)
(defun ls ()
  (let ldir (bbsort (directory currentdir)))
   (let s2display "")
   (ldir.resetToFirst)
   (let i 0)
  (while (ldir.hasMoreElements)
      (i.incr)
    (let f (last (split (ldir.nextElement) fs)))
    (if (isDirectory (+ currentdir fs f)) (let f (+ f fs)))
      (cond
 ((== (mod i 2) 0)
               (let s2display (+ s2display f))
               (print s2display)
               (let s2display "")
            )
            (t
               (let fl (length f))
               (let s2display (+ s2display f tab tab))
               (if (< fl 16) (let s2display (+ s2display tab)))
               (if (< fl 8) (let s2display (+ s2display tab )))
            )
      )
  )

)
(undef execute)
(defun execute (ll)
  (let ldir (directory currentdir))
        (cond
            ((contains ldir (car ll))
                (let com (replaceNth 1 ll (+ currentdir (car ll))))
                (let com (mapcar (lambda (p) (+ "'" p)) ll))
            )
            (t
                (let com (mapcar (lambda (p) (+ "'" p)) ll))
            )
        )
        (let com (cons 'exec com))
        (print "commande = " com)
        (let output (cadr (eval com)))
        (print (output.readLine))
)
(makeQuickLoad 'cmd scriptFile)
(print "Mini-Shell v1.1 loaded." "use (shell) to launch")

