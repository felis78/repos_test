(needsLibraries '(System LIB.Audio))
(require 'libs/utils '$utils_)
(require 'libs/dwdat '$dwdat_)
(undef alarmParams)
(defun alarmParams ()
  (if (not (existsVariable 'alarmFile))
    (let alarmFile "alarm.txt")
  )
  (let af (file alarmFile 'R))
  (setq alarmSound (freadline af))
  (setq alarmSong (freadline af))
  (setq alarmSong2 (freadline af))
  (setq timerSound (freadline af))
  (fclose af)
)
(threadObject 'timer)
(addField 'timer 'duration)
(addField 'timer 'startTime)
(addField 'timer 'endTime)
(addField 'timer 'window)
## Assuming :: and :< operators are defined. See stdlib.ll
(addMethod 'timer (quote (run ()
  (alarmParams)
  (self:<startTime (/p ((getToday).getTimeInMillis) 1000 0))
  (self:<endTime (+ (self::startTime) (self::duration)))
  (let sec (self::duration))
  (let min (/p sec 60 2))
  (print "Sonnerie dans " min " minute(s).")
  (min.decr)
  (let win (fenetre 'Timer 600 110))
  (self:<window win)
  (let left (new Label))
  (left.setBounds 0 0 600 100)
  (left.setBackground Grey)
  (left.setForeground MiddleRed)
  (left.setFont (new Font "Arial Black" 24 24))
  (left.setAlignment 1)
  (win.setBackground Grey)
  (win.add left)
  (win.setAlwaysOnTop t)
  (while (> sec 2)
    (let sec (- (self::endTime) (/p ((getToday).getTimeInMillis) 1000 0)))
    (let min (int (/ sec 60)))
    (let ms "")
    (let ss "")
    (let smin (int min))
    (if (== smin 0) (let smin ""))
    (let ssec (% sec 60))
    (if (> smin 1) (let ms 's))
    (if (> ssec 1) (let ss 's))
    (cond   ((> smin 0)
        (let smin (+s smin " minute" ms " "))
      )
      (t (let smin ""))
    )
    (left.setText (+s smin ssec " seconde" ss " avant sonnerie..."))
    (pause 900)
  )
  (play timerSound)
  (win.dispose)
))
)
(undef timer (min?0 sec?0)
  (timer:<duration (+ (* 60 min) sec))
  (run 'timer)
)
(print "Timer loaded" crlf tab "usage `(timer minutes [seconds?0])`")
