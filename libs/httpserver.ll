;#############################################
;###                                       ###
;##            SIMPLE HTTP SERVER           ##
;#                                           #
;#  Simple HTTP with extended capabilities   #
;#  dealing with NIL scripts and functions   #
;#                                           #
;##  (c) 2001/2017-2022 MICHAUD Yannick     ##
;###                                       ###
;#############################################

(needsLibraries '(LIB.Net LIB.NetEncoding))
(require 'libs/stdlib '$stdlib_)
(require 'ibs/utils '$utils_)

(makeQuickLoad 'lhttp scriptFile)

;########################################
;# kill previous instance
;# and cleanup abnormal remaining sockets
;########################################
(if (existsVariable 'httpServer)
  (httpCleanup)
)
(while (httpfiles.endsWith '/) (setq httpfiles (first httpfiles (- (length httpfiles) 1))))

;###############################################
;## SET THE THREAD TO HANDLE THE SERVER
;#
;# httpServer listens to the 'httpport'
;# and starts a session thread per connection
;###############################################


(threadObject 'httpServer)

(addField 'httpServer 'server)
(addField 'httpServer 'port)
(addField 'httpServer 'orig)
(httpServer:<port httpport)

(threadObject 'httpSession)

(addField 'httpSession 'socket)
(httpSession:<socket 0)
(addField 'httpSession 'orig)

(addMethod 'httpServer (quote (run ()
      (self:<orig (NIL.getOrig))
      (register 'charEncoding 'UTF-8)
      (register 'maxErrors 200)
      (catch exception ((print "Unable to launch HTTP server on port " httpport)(return)) (self:<server (server (self::port))))
      (catch "SocketException" ((print (self.getName) " stopped."))
        (while t 
          (let s (accept (self::server)))
          (if (<> s nil)
            (httpSession:<orig (self::orig))
            (let session (run 'httpSession "httpSession" s))
            (pause 1500)
;            (while (not (s.isClosed)) (pause 10))
          )
        )
      )
    )
    (stop self)
  )
)
(addMethod 'httpServer (quote (kill ()
      ((self::orig).broadcast (+ "-- killing " (self::server)))
      ((self::server).close)
      (stop self)
    )
  )
)
(undef httpCleanup)
(defun httpCleanup ()
  (mapcar (lambda (nto) (if (== (nto.getName) "httpSession") (stop nto))) (activeThreads))
  (mapcar (lambda (nto) (if (== (nto.getName) "httpServer") (print "closing " (nto::server)) ((nto::server).close) (nto.kill))) (activeThreads))
)

(addMethod 'httpSession (quote (run (n sock)
      (self:<socket sock)
      (catch throwable ((sclose sock)(return))
        (let request (sread sock))
        ;# debug
        ((self::orig).broadcast (+ "Request : " request))
        (let lreq (split request " "))
        (let page (after (cadr lreq) '/))
      )
      ;#################################################
      ;# 100 ERRORS MAX (but so many shouldnt happen...)
      ;#################################################
      (register 'maxErrors 100)
      ;#################################################
#      ((self::orig).broadcast (+ "Connexion HTTP for " page))

      (cond ((== page "")
              (cond ((fexists (+ httpfiles "/index.htm"))
                      (sendFile '/index.htm)
                    )
                    ((fexists (+ httpfiles "/index.html"))
                      (sendFile '/index.html)
                    )
                   (t
                    (sprint sock (+s ($http_httpHeader 200) crlf "<!DOCTYPE html><html xmlns=\"http://www.w3.org/1999/xhtml\"><meta Charset='UTF-8'>"))
                    (sprint sock "<body><center><h1>no index file to show</h1></center></body></html>")
                  )
              )
            )
            ( (isnilcommand page)
              (nileval (before page ".nil") (getParams page))
            ) 
            ( (isllcommand page)
              (lleval (before page ".ll") (getParams page))
            )
            ( (isHttpDir page)
              ;to avoid bad relative url
              (if (== (last page) "/")
                (let page (first page (- (length page) 1)))
              )
              (goToDir page )
            )
            (t  (sendFile page)
            )
      )
      (sclose (self::socket))
      (stop self)
    )
  )
)


;################################################
;## FUNCTIONS TO HANDLE VARIOUS KIND OF REQUESTS
;################################################

(undef getArgByName)
(defun getArgByName (url argname)
  (before (after url (+ argname "=") ) "&" )
)
(undef decode)
(defun decode (name)
  (URLDecode name)
)
(undef sendFile)
(defun sendFile (name)
  (let s (self::socket))
  (catch exception ((print (date "dd-MM-YYYY HH:mm:ss") " : Error while trying to get " name " from " s )((self::orig).putVariable 'httpError exceptionObject "Http error")($http_notFound name))
    (let name (decode (replace name '& '%)))
    (let infile (file (+ httpfiles '/ name) 'R))
    (let outcontent (freadContent infile))
    (let ext (upcase (rafter name '.)))
    (cond ((or (== ext "HTM") (== ext "HTML"))
            (let contenttype "text/html; charset=utf-8")
          )
          ((== ext 'ICO)
            (let contenttype "image/x-icon")
          )
          ((== ext 'PNG)
            (let contenttype "image/png")
          )
          ((== ext 'GIF)
            (let contenttype "image/gif")
          )
          ((or (== ext 'JPG) (== ext 'JPEG))
            (let contenttype "image/jpeg")
          )
          ((== ext 'txt)
            (let contenttype "text/text; charset=utf-8"")
          )
          (t
            (let contenttype "text; charset=utf-8")
          )
    )
    #((self::orig).broadcast (+ "sending file with " contenttype))
    (let contentname (after name "/"))
    (let header (+ "HTTP/1.1 200 OK" crlf "Content-Type: " contenttype crlf ))
    (if (not (contains contenttype "htm")) (sprint s header))
    (sprintContent s outcontent)
  )
)
(undef hasParams)
(defun hasParams (page)
  (cond ((contains page "?") t) (t nil))
)
(undef getParams)
(defun getParams (page)
  (cond 
   ((hasParams page)
    (split (decode (after page "?")) "&")
   )
   (t nil)
  )
)
(undef isHttpDir)
(defun isHttpDir (param)
  (isDirectory (+ httpfiles '/ param) )
)
(undef isnilcommand)
(defun isnilcommand (page)
  (contains page ".nil")
)
(undef nileval)
(defun nileval (function params)
  (let function (decode (replace function '& '%)))
  (let s (self::socket))
  (cond 
    ((== params nil)
      (setq str (makelist function ))
    )
    (t
      (setq str (cons function params))
    )
  )
  (let estr (evalVM (NIL.getOrig) str))
  (sprint s estr)
)
(undef isllcommand)
(defun isllcommand (page)
  (contains page ".ll")
)

(undef lleval)
(defun lleval (function params)
  (let function (decode (replace function '& '%)))
  (let s (self::socket))
  (cond 
    ((== params nil)
      (let str (list function ))
    )
    (t
      (let str (cons function params))
    )
  )
  (catch exception (($http_notFound function))
    (eval str)
  )
)
(undef ziclink)
(defun ziclink (d lparams)
  (let s (self::socket))
  (let i 1)
  (startStyle "font:42pt Garamond;color:darkblue")
  (let d (replace (replace d '\\' '/) '// '/))
  (if (not (d.endsWith '/))
    (let d (+ d '/ ))
  )
  (let f (new 'java.io.File (d.substring 0 (d.lastIndexOf "/"))))
  (let parent (replace (f.getParent) '\\ '/))
  (sprint s (+ "<center><a href=\"zicdir.nil?'" parent "\">"))
  (putImg "/icons/back.png" 40 40)
  (sprint s " ..</a></center><br/><br/><br/>")
  (sprint s "<table width=100%>")
  (lparams.resetToFirst)
  (while (lparams.hasMoreElements)
    (let zic (lparams.nextElement))
    (let zic (replace (replace zic '\\ '/) '// '/))
    (let uzic (URLEncode zic))
    (let szic (zic.substring (incr (zic.lastIndexOf "/")) (length zic)))
    (if (== i 1) (sprint s "<tr>"))
    (cond ((isDirectory zic)
          (let i (+ (mod i 5) 1))
          (sprint s (+ "<td><a href=\"zicdir.nil?'" uzic "\">" zic "</a></td>")) 
        )
        (((upcase szic).endsWith ".MP3")
          (let i (+ (mod i 5) 1))
          (sprint s (+  "<td><a href=\"play.ll?'" uzic "\">"))
          (putImg "/icons/play.png" 28 28)
          (sprint s "</a>")
          (sprint s (+ "<a href=\"pladd.ll?'" uzic "\">Add : " szic "</a>"))
          (sprint s "</td>")
        )
        (t)
    )
    (if (== i 1) (sprint s "</tr>"))
  )
  (while (!= i 1) (sprint s "<td></td>") (let i (+ (mod i 5) 1 ))) 
  (sprint s "</tr>")
  (sprint s "</table>")
  (endStyle)
)
(undef zicdir)
(defun zicdir (param)
  (let s (self::socket))
  (sprint s ($http_httpHeader "200 OK") ($http_htmlHeader param "bgcolor=#999999"))
  (cond
   ( (== param nil)
    (sprint s "<h3>Aucun param√®tre</h3>")
   )
   ((isHttpDir param)
    (let param (+ httpfiles '/ param))
    (ziclink param (directory param))
   )
   ((isDirectory param)
    (ziclink param (directory param))
   )
   (t (sprint s (+ "<h3>Aucun fichier...<i>(" param ")</i></h3>")))
  )
  (startStyle "font:32pt Garamond;color:darkblue")
  (sprint s "<a href=\"playzic.ll\">")
  (putImg "/icons/play.png" 28 28)
  (sprint s " Play music </a> / <a href=\"stopzic.ll\">")
  (putImg "/icons/stop.png" 28 28)
  (sprint s "Stop music</a><br/><br/>")
  (sprint s "PLAYLIST:")
  (putImg "/icons/editclear.png")
  (sprint s "(<a href=\"resetPL.ll\">Reset Playlist</a>)<br/><br/>")
  (endStyle)
  (showPL)
  (sprint s ($http_htmlFooter))
)
(undef showPL)
(defun showPL ()
  (let s (self::socket))
  (let vm ((NIL.getOrig).getOrig))
  (startStyle "font:12pt Arial;color:darkred")
  (let i 0)
  (let pl (vm.getVariable '$pl_list))
  (pl.resetToFirst)
  (while (pl.hasMoreElements)
   (i.incr)
   (let title (pl.nextElement))
   (sprint s "<a href=\"rmzic.ll?" i "\">")
   (putImg "icons/del.png" 18 18)
   (sprint s "(del)</a>  ")
   (sprint s (+ title "<br/>"))
  )
  (endStyle)
)
(undef resetPL)
(defun resetPL ()
  (evalVM (self::orig) '(setq $pl_list nil))
)
(undef stopzic)
(defun stopzic ()
  (evalVM (self::orig) '($pl_player.stop))
)
(undef playzic)
(defun playzic ()
  (evalVM (self::orig) '(playPL))
)
(undef pladd)
(defun pladd (zic)
  (let zic (replace zic '\\\\ '/))
  (let zic (replace zic '\\ '/))
  (evalVM (self::orig) (append '(addToPL) (list (+  "'" zic))))
)
(undef rmzic)
(defun rmzic (n)
  (let vm ((NIL.getOrig).getOrig))
  (evalVM vm (append '(rmFromPL) (list n)))
)
(undef showimg)
(defun showimg (pref lparams)
  (let s (self::socket))
  (let i 1)
  (sprint s (+ "<center>" (length lparams) " icons</center>"))
  (sprint s "<br /><table>")
  (lparams.resetToFirst)
  (while (lparams.hasMoreElements)
    (if (== i 1) (sprint s "<tr>"))
    (let img (after (lparams.nextElement) httpfiles))
    (sprint s (+ "<td><a href=\"" (+ pref '/ img) "\"><img src=\"" (+ pref '/ img) "\" width=\"25\" height=\"25\">""</a></td>"))
    (let i (+ (mod i 20) 1))
    (if (== i 1) (sprint s "</tr>"))
  )
  (if (<> i 1) (sprint s "</tr>"))
  (sprint s "</table>")
)
(undef imgdir)
(defun imgdir (param)
  (let s (self::socket))
  (sprint s ($http_httpHeader "200 OK") ($http_htmlHeader param))
  (cond
    ( (== param nil)
      (sprint s "<h3>Aucun param√®tre</h3>")
    )
    ( (isHttpDir param)
      (let param2 (+ httpfiles '/ param))
      (showimg param (directory param2))
    )
    ( (isDirectory param)
      (showimg param (directory param))
    )
    (t (sprint s (+ "<h3>Aucune image a montrer...<i>(" param ")</i></h3>")))
  )
  (sprint s ($http_htmlFooter))
)
(undef goToDir)
(defun goToDir (d)
  (let s (self::socket))
  (let fbase (+ httpfiles '/ d))
  (sprint s ($http_httpHeader "200 OK"))
  (sprint s ($http_htmlHeader d))
  (let c (directory fbase))
  (if (== (length c) 0)
    (sprint s (+ "<center><h1>No file in " d "</h1></center>"))
  )
  (c.resetToFirst)
  (while (c.hasMoreElements)
    (let nc (after (c.nextElement) httpfiles))
    (sprint s (+ "<a href=\"" (+ d '/ nc) "\">" nc "</a><br>"))
  )
  (sprint s ($http_htmlFooter))
)
(undef $http_httpHeader)
(defun $http_httpHeader (code)
  (+s "HTTP/1.1 " code crlf "Content-Type: text/html; charset=utf-8" crlf crlf)
)
(undef $http_htmlHeader)
(defun $http_htmlHeader (title bodyOptions?"")
  (let rez (+ "<!DOCTYPE html>" crlf))
  (let rez (+ rez "<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"fr\">" crlf ))
  (let rez (+ rez "<meta name=\"Author\" content=\"KsyNET\">" crlf "<meta name=\"Keywords\" content=\"Ian\">" crlf))
  (let rez (+ rez "<title>" title "</title></head>" crlf))
  (if (!= bodyOptions "") (let bodyOptions (+s " " bodyOptions)))
  (let rez (+ rez "<body" bodyOptions ">" crlf))
  rez
)
(undef $http_htmlFooter)
(defun $http_htmlFooter ()
  "</body></html>"
)
(undef $http_notFound)
(defun $http_notFound (name)
  (let sock (self::socket))
  (let notfound (+ "<center><h1>404 File Not Found</h1><br><br><h2>" name "</h2></center></body>"))
  (sprint sock (+s ($http_httpHeader "404 Not Found") crlf ($http_htmlHeader "404 Not Found") notfound crlf ($http_htmlFooter)))
  (sclose sock)
  (stop self)
)
(undef $http_back)
(defun $http_back ()
  (let s (self::socket))
  (sprint s "<!doctype HTML><html><head><script>location.replace(document.referrer);</script></head></html>")
)
(undef putImg)
(defun putImg (src w?40 h?40)
  (let s (self::socket))
  (sprint s (+ "<img src=\"" src "\" width=\"" w "\" height=\"" h "\"/>"))
)
(undef startStyle)
(defun startStyle (style)
  (let s (self::socket))
  (sprint s (+  "<div style=\"" style "\">"))
)
(undef endStyle)
(defun endStyle ()
  (let s (self::socket))
  (sprint s "</div>")
)
(setq httpServer (run 'httpServer))
(print "http server started")
