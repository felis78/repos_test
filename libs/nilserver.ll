;#################################################
;###                                           ###
;##                 NIL SERVER                  ##
;#                                               #
;#      A simple thread to provide a NIL         #
;#          server via telnet or TkNil           #
;#                                               #
;##   (c) 2001-2019 MICHAUD Yannick & Xylian    ##
;###                                           ###
;#################################################

;***************
;INITIALIZATIONS
;***************
;## Quick load
(makeQuickLoad 'lserver scriptFile)

;#REQUIREMENTS
(require 'libs/stdlib '$stdlib_)
(require 'libs/java '$java_)

(setq users nil)

(setq $nilserver_old_prefix (VARIABLE_NAME_PREFIX.Clone))
(register 'VARIABLE_NAME_PREFIX "$nilserver_")
(setq version "0.9c")

(setq remoteDir "")
(setq tmpFiles nil)


;SEND TO SOCKET
(undef bsock)
(defun bsock (s w)
   (sprint s w)
)

;SERVER
(threadObject '$nil_server)
(setq ndeb 0)
(undef deb)
(defun deb ()
   (print ($nilserver_ndeb.incr))
)
(addField '$nil_server '_vm)
(addField '$nil_server '_VMs)
(addMethod '$nil_server 
   (quote 
      (run ()
         (self:<_vm NIL)
         (register 'charEncoding 'UTF-8)
         (catch exception ((print "Impossible de lancer le serveur..."))
            (let ss (server nilserverport)) 
         )
         (let s "")
         (While (not (ss.isClosed))
#          ;  (catch exception ((print "Une erreur est survenue : accept") (setq eO (NIL.getMyVariable "exceptionObject")) (eO.printStackTrace))
               (let s (accept ss))
#           ; )
            (if (<> s nil)
               (print "connection to server")
               (catch exception ((print "Une erreur est survenue : initialisation")(let s nil))
                  (bsock s "Bienvenue sur la version réseau de NIL (c) 2001-202x MICHAUD Yannick & KsyNET")
                  (let nom "aucun")
                  (bsock s "Entrez votre nom:")
                  (bsock s prompt)
                  (let oNIL (NIL.getOrig))
                  (let nusers (oNIL.getVariable 'users))
                  (let nom (sread s))
#                  (if (== nom 'Seldon) (kick nom) (remove nom nusers))
                  (while (contains nusers nom)
                     (bsock s (+  "Ce nom est deja pris" crlf))
                     (let nom (sread s))
                  )
                  (if (and (!= nom nil) (!= nom 'EOF))
                     (bsock s (+  "Bonjour " nom))
                     (setq users (cons nom users))
                     (addVMVariable oNIL 'users users)
                     (let nvm (newVM s "(setq inifilename 'client.ini)(register 'AUTO 'auto2.nil)" ))
                     (putVMProp oNIL nom s "socket")
                     (oNIL.broadcast (+ nom " vient de se connecter." crlf))
                     (bsock s "pour envoyer un message à l'administrateur utilisez:")
                     (bsock s "(msg \"votre message\")")
                     (bsock s "pour voir les autres connectés utilisez:")
                     (bsock s "(showusers)")
                     (bsock s "pour envoyer un message à un autre connecté utilisez:")
                     (bsock s "(msgTo \"son nom\" \"votre message\")")
                     (bsock s 'starting...)
                     (bsock s crlf)   
                     (addVMVariable nvm 'nom nom)
                     (addVMVariable nvm 'nilorigin oNIL)
                     (putVMProp oNIL nom nvm "VM")
                     (runVM nvm)
                  )
               )
            )
         )
      )
   )
)

;INTERPRETER
(threadObject '$nil_interpreter)
(addMethod '$nil_interpreter 
   (quote 
      (run ()
         (catch exception ((print "Exception in interpreter, port " nilinterpreterport) (print (exceptionObject.getMessage)))
            (let ss (server nilinterpreterport))
            (while t 
               (let s (accept ss))
               (let q (sread s))
       (catch exception ((bsock s (exceptionObject.getMessage))(sclose s))
               (bsock s (eval (makelist q)))
               (sclose s)
       )
            )
         )
      )
   )
)

;OBJECT SERVER
(threadObject '$nil_objectServer)
(addMethod '$nil_objectServer 
   (quote 
      (run ()
         (catch exception ((print "Unable to launch objectServer ")) (let ss (server nilobjectserverport)))
         (While t 
            (let s (accept ss))
            (let q (sread s))
            (cond ((contains (upcase q) "GET REMOTE FILE" )
                     (let q (sread s))
                     (if (exists q)
                        (let f (file q 'R))
                        (let fc (freadContent f))
                        (sprintObject s fc)
                     )
                  )
                  ((contains (upcase q) "GET REMOTE DIR" )
                     (let q (sread s))
                     (let do (directory q))
                     (sprintObject s do)
                  )
            )
            (sclose s)
         )
      )
   )
)

(undef getRemoteFile)
(defun getRemoteFile (s p fn)
   (let nfn "no file")
   (catch nilexception ((print "Unable to connect to " s ":" p))
      (let sock (socket s p))
      (catch nilexception ((print "Error while retrieving file ") (setq eO (NIL.getMyVariable "exceptionObject")) (eO.printStackTrace))
         (bsock sock (+ "GET REMOTE FILE" crlf))
         (let fn (replace fn "\\" '/))
         (bsock sock fn)
         (let extS "")
         (if (contains fn ".")
            (let extI (min (fn.lastIndexOf ".") (length fn)))
            (let extS (fn.substring extI (length fn)))
         )
         (let fnI (fn.lastIndexOf '/))
         (let fc (sreadObject sock))
         (let timestamp (last ((getToday).getTimeInMillis) 10))
         (let tmp (getenv "java.io.tmpdir"))
         (if (<> (last tmp) "\\") (let tmp (+ tmp "/" )))
         (let nfn (+ tmp timestamp extS))
         (let f (file nfn 'W))
         (fprintContent f fc)
         (fclose f)
         (setq $nilserver_tmpFiles (cons nfn $nilserver_tmpFiles))
      )
   )
   nfn
)
(undef delTempRemoteFiles)
(defun delTempRemoteFiles ()
   (mapcar 'delete $nilserver_tmpFiles)
   (setq $nilserver_tmpFile nil)
   "All tmp files deleted."
)
(undef getRemoteDir)
(defun getRemoteDir (s p d)
   (let dc nil)
   (let sock nil)
   (cond ((== d "/")
            (setq $nilserver_remoteDir d)
         )
         ((and (> (length d) 1) (or (== (d.charAt 1) ":") (d.startsWith "/")))
               (setq $nilserver_remoteDir d)
         )
         (t
            (setq $nilserver_remoteDir (+ $nilserver_remoteDir "/" d))
         )
   )
   (if (and (== (length $nilserver_remoteDir) 2) (== (last $nilserver_remoteDir) ":"))
      (setq $nilserver_remoteDir (+ $nilserver_remoteDir "/"))
   )

   (catch exception ((print "Unable to connect to " s ":" p)) (let sock (socket s p)))
   (if (!= sock nil)
      (catch exception ((print "Error while retrieving directory " d " on " s ":" p)(setq eO (NIL.getMyVariable "exceptionObject")) (eO.printStackTrace))
         (bsock sock "GET REMOTE DIRECTORY")
         (bsock sock $nilserver_remoteDir)
         (let dc (sreadObject sock))
      )
   )
   dc
)

(undef msgto)
(defun msgto (nom m)
  (if (contains users nom)
    (bsock nom.socket (+ "#message du serveur: " m crlf '? crlf) )
    (bsock nom.socket "? ")
    (+ "message envoye a " nom crlf)
  )
)
(undef kick)
(defun kick (nom)
  (if (contains users nom)
    (let sock nom.socket)
    (setq users (remove nom users))
    ((getField NilServer '_vm).putVariable 'users users 'users)
    (sock.close)
  )
)
(undef kickAll)
(defun kickAll ()
  (mapcar (lambda (u) (kick u)(+s u " kicked.")) users)
)
;RUNS THE NILSERVER
(undef run_server)
(defun run_server (sn?NilServer)
  (setqv sn (run '$nil_server))
  (beep)
   sn
)
(undef run_interpreter)
(defun run_interpreter (sin?NilInter)
  (setqv sin (run '$nil_interpreter))
  (+s "NIL Net Interpreter v " $nilserver_version " started (" sin ") on port " nilinterpreterport)
)
(undef run_objectServer)
(defun run_objectServer (son?NilObjectServer)
   (setqv son (run $nil_objectServer))
   (print "Nil Object Server v " $nilserver_version " started (" son ") on " nilserverport)
)

;## END
(print "Nil server and interpreter v " version " loaded.")
(register 'VARIABLE_NAME_PREFIX old_prefix)
(unset $nilserver_old_prefix)

#(run_server)
#(run_interpreter)
#(run_objectServer)
($ian_addByeCommand '(delTempRemoteFiles))

